{  akka : {
    cluster : {
      client : {
        receptionist : {
          name : receptionist
          role : 
          number-of-contacts : 3
          response-tunnel-receive-timeout : 30s
          use-dispatcher : 
          heartbeat-interval : 2s
          acceptable-heartbeat-pause : 13s
          failure-detection-interval : 2s
        }
        initial-contacts : <<unknown value>>
        establishing-get-contacts-interval : 3s
        refresh-contacts-interval : 60s
        heartbeat-interval : 2s
        acceptable-heartbeat-pause : 13s
        buffer-size : 1000
        reconnect-timeout : off
      }
      pub-sub : {
        name : distributedPubSubMediator
        role : 
        routing-logic : random
        gossip-interval : 1s
        removed-time-to-live : 120s
        max-delta-elements : 3000
        send-to-dead-letters-when-no-subscribers : on
        use-dispatcher : 
      }
      singleton : {
        singleton-name : singleton
        role : 
        hand-over-retry-interval : 1s
        min-number-of-hand-over-retries : 15
        use-lease : 
        lease-retry-interval : 5s
      }
      singleton-proxy : {
        singleton-name : singleton
        role : 
        singleton-identification-interval : 1s
        buffer-size : 1000
      }
      distributed-data : {
        name : ddataReplicator
        role : 
        gossip-interval : "2 s"
        notify-subscribers-interval : "500 ms"
        max-delta-elements : 500
        use-dispatcher : 
        pruning-interval : "120 s"
        max-pruning-dissemination : "300 s"
        pruning-marker-time-to-live : "6 h"
        serializer-cache-time-to-live : 10s
        recreate-on-failure : off
        prefer-oldest : off
        delta-crdt : {
          enabled : on
          max-delta-size : 50
        }
        durable : {
          keys : <<unknown value>>
          pruning-marker-time-to-live : "10 d"
          store-actor-class : "Akka.DistributedData.LightningDB.LmdbDurableStore, Akka.DistributedData.LightningDB"
          use-dispatcher : akka.cluster.distributed-data.durable.pinned-store
          pinned-store : {
            executor : thread-pool-executor
            type : PinnedDispatcher
          }
          lmdb : {
            dir : ddata
            map-size : "100 MiB"
            write-behind-interval : off
          }
        }
      }
      sharding : {
        guardian-name : sharding
        role : 
        remember-entities : off
        passivate-idle-entity-after : 120s
        coordinator-failure-backoff : "5 s"
        retry-interval : 2s
        buffer-size : 100000
        handoff-timeout : 60s
        shard-start-timeout : 10s
        shard-failure-backoff : 10s
        entity-restart-backoff : 10s
        rebalance-interval : 10s
        journal-plugin-id : 
        snapshot-plugin-id : 
        state-store-mode : persistence
        snapshot-after : 1000
        keep-nr-of-batches : 2
        least-shard-allocation-strategy : {
          rebalance-absolute-limit : 0
          rebalance-relative-limit : 0.1
          rebalance-threshold : 1
          max-simultaneous-rebalance : 3
        }
        waiting-for-state-timeout : 5s
        updating-state-timeout : 5s
        entity-recovery-strategy : all
        entity-recovery-constant-rate-strategy : {
          frequency : "100 ms"
          number-of-entities : 5
        }
        coordinator-singleton : akka.cluster.singleton
        use-dispatcher : 
        use-lease : 
        lease-retry-interval : 5s
        distributed-data : {
          majority-min-cap : 5
          durable : {
            keys : [shard-*]
          }
          max-delta-elements : 5
        }
      }
      sharded-daemon-process : {
        sharding : {
          guardian-name : sharding
          role : 
          remember-entities : off
          passivate-idle-entity-after : 120s
          coordinator-failure-backoff : "5 s"
          retry-interval : 2s
          buffer-size : 100000
          handoff-timeout : 60s
          shard-start-timeout : 10s
          shard-failure-backoff : 10s
          entity-restart-backoff : 10s
          rebalance-interval : 10s
          journal-plugin-id : 
          snapshot-plugin-id : 
          state-store-mode : persistence
          snapshot-after : 1000
          keep-nr-of-batches : 2
          least-shard-allocation-strategy : {
            rebalance-absolute-limit : 0
            rebalance-relative-limit : 0.1
            rebalance-threshold : 1
            max-simultaneous-rebalance : 3
          }
          waiting-for-state-timeout : 5s
          updating-state-timeout : 5s
          entity-recovery-strategy : all
          entity-recovery-constant-rate-strategy : {
            frequency : "100 ms"
            number-of-entities : 5
          }
          coordinator-singleton : akka.cluster.singleton
          use-dispatcher : 
          use-lease : 
          lease-retry-interval : 5s
          distributed-data : {
            majority-min-cap : 5
            durable : {
              keys : [shard-*]
            }
            max-delta-elements : 5
          }
        }
        keep-alive-interval : 10s
      }
      roles : [smsRole]
      seed-nodes : ["akka.tcp://messenger-system@localhost:7919"]
    }
    actor : {
      serializers : {
        akka-cluster-client : "Akka.Cluster.Tools.Client.Serialization.ClusterClientMessageSerializer, Akka.Cluster.Tools"
        akka-pubsub : "Akka.Cluster.Tools.PublishSubscribe.Serialization.DistributedPubSubMessageSerializer, Akka.Cluster.Tools"
        akka-singleton : "Akka.Cluster.Tools.Singleton.Serialization.ClusterSingletonMessageSerializer, Akka.Cluster.Tools"
        akka-data-replication : "Akka.DistributedData.Serialization.ReplicatorMessageSerializer, Akka.DistributedData"
        akka-replicated-data : "Akka.DistributedData.Serialization.ReplicatedDataSerializer, Akka.DistributedData"
        akka-sharding : "Akka.Cluster.Sharding.Serialization.ClusterShardingMessageSerializer, Akka.Cluster.Sharding"
      }
      serialization-bindings : {
        "Akka.Cluster.Tools.Client.IClusterClientMessage, Akka.Cluster.Tools" : akka-cluster-client
        "Akka.Cluster.Tools.PublishSubscribe.IDistributedPubSubMessage, Akka.Cluster.Tools" : akka-pubsub
        "Akka.Cluster.Tools.PublishSubscribe.Internal.SendToOneSubscriber, Akka.Cluster.Tools" : akka-pubsub
        "Akka.Cluster.Tools.Singleton.IClusterSingletonMessage, Akka.Cluster.Tools" : akka-singleton
        "Akka.DistributedData.IReplicatorMessage, Akka.DistributedData" : akka-data-replication
        "Akka.DistributedData.IReplicatedDataSerialization, Akka.DistributedData" : akka-replicated-data
        "Akka.Cluster.Sharding.IClusterShardingSerializable, Akka.Cluster.Sharding" : akka-sharding
      }
      serialization-identifiers : {
        "Akka.Cluster.Tools.Client.Serialization.ClusterClientMessageSerializer, Akka.Cluster.Tools" : 15
        "Akka.Cluster.Tools.PublishSubscribe.Serialization.DistributedPubSubMessageSerializer, Akka.Cluster.Tools" : 9
        "Akka.Cluster.Tools.Singleton.Serialization.ClusterSingletonMessageSerializer, Akka.Cluster.Tools" : 14
        "Akka.DistributedData.Serialization.ReplicatedDataSerializer, Akka.DistributedData" : 11
        "Akka.DistributedData.Serialization.ReplicatorMessageSerializer, Akka.DistributedData" : 12
        "Akka.Cluster.Sharding.Serialization.ClusterShardingMessageSerializer, Akka.Cluster.Sharding" : 13
      }
    }
    remote : {
      dot-netty : {
        tcp : {
          hostname : 0.0.0.0
          public-hostname : localhost
          port : 0
          public-port : 0
        }
      }
    }
  }
}